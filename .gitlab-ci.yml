image: ayufan/rock64-dockerfiles:x86_64

stages:
  - build

variables:
  GITHUB_USER: ayufan-rock64
  GITHUB_REPO: linux-build

  USE_CCACHE: "true"
  CCACHE_DIR: "/data/shared/ccache"

  VERSION: "${CI_COMMIT_TAG}"
  RELEASE_NAME: "${CI_COMMIT_TAG}"
  RELEASE_TITLE: "${CI_COMMIT_TAG}: gitlab-ci-linux-build-${CI_PIPELINE_ID}"
  RELEASE: "$CI_JOB_ID"
  PIPELINE_URL: $CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID

stages: [draft, build, package, images, pre-release, release]

before_script:
  - ccache -M 0 -F 0
  - repo init -u https://github.com/ayufan-rock64/linux-manifests -b default --depth=1 --no-clone-bundle
  - 'export CHANGES=$(cat RELEASE.md)'
  - 'export DESCRIPTION=$(echo -e "${CHANGES}\n\n${PIPELINE_URL}")'
  - 'upload() { github-release upload --tag "${VERSION}" --name "$(basename "$1")" --file "$1"; }'
  - 'upload_all() { for i in $*; do upload "$i"; done; }'

draft:
  stage: draft
  only: [tags]
  script:
    - github-release release --tag "${VERSION}" --name "$RELEASE_TITLE" --description "$DESCRIPTION" --target "$CI_COMMIT_SHA" --draft
    - repo sync -j 20 -c --force-sync
    - repo manifest -r -o manifest.xml
    - echo "machine github.com login user password $GITHUB_TOKEN" > ~/.netrc
    - repo forall -g tagged -e -c git tag "$GITHUB_USER/$GITHUB_REPO/$VERSION"
    - repo forall -g tagged -e -c git push ayufan "$GITHUB_USER/$GITHUB_REPO/$VERSION" -f
    - upload manifest.xml

u-boot:
  stage: build
  only: [tags]
  script:
    - repo sync -j 20 -c --force-sync u-boot arm-trusted-firmware rkbin
    - make u-boot-virtual
    - upload_all *.deb
    - upload_all *.xz
  artifacts:
    paths:
      - "out/u-boot-*/"

kernel:
  stage: build
  only: [tags]
  script:
    - repo sync -j 20 -c --force-sync kernel
    - make kernel-build KERNEL_DIR=kernel
    - upload_all *.deb
  artifacts:
    paths:
      - "*.deb"

kernel-mainline:
  stage: build
  only: [tags]
  script:
    - repo sync -j 20 -c --force-sync kernel-mainline
    - make kernel-build KERNEL_DIR=kernel-mainline
    - rm -f linux-libc*.deb
    - upload_all *.deb
  artifacts:
    paths:
      - "*.deb"

package:
  stage: package
  only: [tags]
  script:
    - make linux-virtual
    - upload_all *.deb
  artifacts:
    paths:
      - "*.deb"

pre-release:
  stage: pre-release
  only: [tags]
  environment:
    name: pre-release
    url: https://github.com/$GITHUB_USER/$GITHUB_REPO/releases/tag/$CI_COMMIT_TAG
  script:
    - github-release edit --tag "${VERSION}" --name "$RELEASE_TITLE" --description "$DESCRIPTION" --pre-release

release:
  stage: release
  only: [tags]
  when: manual
  environment:
    name: release
    url: https://github.com/$GITHUB_USER/$GITHUB_REPO/releases/tag/$CI_COMMIT_TAG
  script:
    - github-release edit --tag "${VERSION}" --name "$RELEASE_TITLE" --description "$DESCRIPTION"

.build_rock64: &build_rock64
  stage: images
  only: [tags]
  script:
    - make "$CI_JOB_NAME" BOARD_TARGET=rock64
    - upload_all *.xz

.build_rock64_manual: &build_rock64_manual
  <<: *build_rock64
  when: manual
  allow_failure: true

bionic-lxde-rock64: *build_rock64

xenial-containers-rock64: *build_rock64

jessie-openmediavault-rock64: *build_rock64
stretch-openmediavault-rock64: *build_rock64

xenial-minimal-rock64: *build_rock64
jessie-minimal-rock64: *build_rock64
stretch-minimal-rock64: *build_rock64
bionic-minimal-rock64: *build_rock64

xenial-i3-rock64: *build_rock64_manual
xenial-mate-rock64: *build_rock64_manual
bionic-mate-rock64: *build_rock64_manual
